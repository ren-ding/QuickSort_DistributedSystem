/* quicklib: library of provided functions supporting quicksort
   for comp2310 assignment 2, 2012

   written by Peter Strazdins, RSCS ANU, 09/12
   version 1.0 30/10/12
*/

// post: returns k where n/2 < 2^k <= n
int lg2(int n);

// post: A[0..n-1] is a permutation of its initial values
//       returns m where 0<=m<n and for each i:0..m,j:m+1..n-1  a[i] <= a[j] 
int partition(int A[], int n);

// post: A[0:n-1] is a sorted version of the original A[0:n-1]
void quickSort(int A[], int n);

// post: initialize A[0:n-1] according to seed s
void genArray(int A[], int n, int s);

// pre:  A[0:n-1] was generated by a call to  genArray(A, n, s)
// post: checks if A has been correctly sorted    
void checkArray(int A[], int n, int s);

// post: prints A[0:n-1] across a line of output 
void printArray(int A[], int n);

// post: being timer
void startSortTimer();

// post: print out the elapsed time from the lst call of  startSortTimer();
void stopSortTimer();
